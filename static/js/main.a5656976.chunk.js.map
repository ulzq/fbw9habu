{"version":3,"sources":["component/Eingabe.js","component/BuchEintrag.js","component/BuchListe.js","App.js","serviceWorker.js","index.js"],"names":["Eingabe","livePreisSetzen","hinzufuegen","titel","React","useState","beschreibung","beschreibungSetzen","preis","preisSetzen","InputGroup","FormControl","value","onChange","e","target","preisAlsZahl","Number","replace","isNaN","Append","Button","onClick","BuchEintrag","wert","loeschen","key","width","BuchListe","buchDefault","livePreis","buch","console","log","endSumme","reduce","summe","obj","Table","striped","bordered","hover","variant","map","nummer","bind","colspan","JSON","parse","localStorage","getItem","listeSpeichern","liste","setItem","stringify","App","setzeBuch","setzeLivePreis","eingabe","neueListe","filter","_","n","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5656976.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { Button, FormControl, InputGroup } from 'react-bootstrap'\n\nfunction Eingabe({livePreisSetzen,hinzufuegen,titel}){\n\n  const [beschreibung,beschreibungSetzen] = React.useState('');\n  const [preis,preisSetzen]     = React.useState('');\n\n  const beschreibungHaendler = (e) =>\n    beschreibungSetzen(e.target.value)\n\n  const preisHaendler = (e) => {\n    let preis = e.target.value;\n    preisSetzen(preis);\n    let preisAlsZahl = Number(preis.replace(',','.'));\n    livePreisSetzen( isNaN(preisAlsZahl)? 0 : preisAlsZahl );\n  }\n\n  const hinzufuegenHaendler = e => {\n    let preisAlsZahl = Number(preis.replace(',','.'));\n    if ( isNaN(preisAlsZahl) ) return;    hinzufuegen({beschreibung,preis:preisAlsZahl});\n    beschreibungSetzen('');\n    preisSetzen('');\n    livePreisSetzen(0);\n  }\n\n  return (\n    <InputGroup>\n      <FormControl value={beschreibung} onChange={beschreibungHaendler}/>\n      <FormControl value={preis} onChange={preisHaendler}/>\n      <InputGroup.Append>\n        <Button onClick={hinzufuegenHaendler}>{titel}</Button>\n      </InputGroup.Append>\n    </InputGroup>\n)};\n\nexport default Eingabe;\n","\nimport React from 'react';\nimport { Button } from 'react-bootstrap'\n\nfunction BuchEintrag({wert,key,loeschen}){\n  const {beschreibung,preis} = wert;\n  return (\n  <tr>\n    <td>\n      {beschreibung}\n    </td>\n    <td>\n      {preis}\n    </td>\n    <td width=\"1%\">\n      <Button onClick={loeschen}>x</Button>\n    </td>\n  </tr>\n)};\n\nexport default BuchEintrag;\n","\nimport React from 'react'\nimport { Table } from 'react-bootstrap'\n\nimport BuchEintrag from './BuchEintrag'\n\nfunction BuchListe({livePreis,buch,loeschen}){\n  console.log(livePreis);\n  let endSumme = livePreis + buch.reduce(\n    (summe,obj)=> { return summe + obj.preis },\n    0\n  );\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <tbody>{\n        buch.map( (wert,nummer)=>\n        <BuchEintrag key={nummer}\n          wert={wert}\n          loeschen={loeschen.bind(null,nummer)}\n        /> )\n      }</tbody>\n      <tfoot>\n        <td>\n          <b>Summe:</b>\n        </td>\n        <td colspan=\"2\">\n          {endSumme}\n        </td>\n      </tfoot>\n    </Table>\n  );\n};\n\nexport default BuchListe;\n","\nimport React, { useState } from 'react';\n\nimport Eingabe   from './component/Eingabe'\nimport BuchListe from './component/BuchListe'\n\nlet buchDefault;\ntry {\n  buchDefault = JSON.parse(\n    localStorage.getItem('liste')\n  )||[];\n} catch (e){\n  buchDefault = [];\n};\n\nconst listeSpeichern = liste => {\n  try {\n    localStorage.setItem('liste',JSON.stringify(liste));\n  } catch(e){}\n}\n\nfunction App(){\n  const [ buch, setzeBuch ] = useState(buchDefault);\n  const [ livePreis, setzeLivePreis ] = useState(0);\n\n  const loeschen = (nummer)=> {\n    const neueListe = buch.filter( (_,n)=> !( n === nummer ) );\n    setzeBuch( neueListe );\n    listeSpeichern( neueListe );\n  }\n\n  const hinzufuegen = (eingabe) => {\n    const neueListe = [eingabe,...buch];\n    setzeBuch( neueListe );\n    listeSpeichern( neueListe );\n  }\n\n  return (\n  <>\n    <Eingabe setzeLivePreis={setzeLivePreis} hinzufuegen={hinzufuegen} titel=\"+\"/>\n    <BuchListe livePreis={livePreis} buch={buch} loeschen={loeschen}/>\n  </>\n)};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('buch')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}